{"version":3,"sources":["utils/accessToken.js","pages/Login.js","constants/index.js","services/services.js","components/Fields/SelectField.js","components/Fields/DateTimeFIeld.js","components/Validations/inputLength.js","components/Fields/InputField.js","components/Filters/Filters.js","components/Filters/index.js","components/ListPlaylists/ListPlaylists.js","components/ListPlaylists/index.js","pages/Playlists.js","App.js","serviceWorker.js","redux/createStore.js","index.js"],"names":["getAccessToken","accessToken","localStorage","getItem","access_token","qs","parse","window","location","hash","substr","history","pushState","href","split","useStyles","makeStyles","theme","button","marginTop","spacing","h4","h2","fontWeight","main","textAlign","minHeight","display","flexDirection","alignItems","justifyContent","Login","classes","Container","component","className","Typography","variant","Button","process","color","size","getFilters","a","Axios","get","data","filters","_handleFeaturedPlaylistsError","response","status","removeItem","toast","error","message","getFeaturedPlaylists","params","headers","Authorization","playlists","items","formControl","minWidth","renderSelectField","input","children","label","custom","FormControl","InputLabel","Select","native","inputProps","name","SelectField","values","id","filterName","Field","map","index","value","key","renderDateTimerField","TextField","InputLabelProps","shrink","type","DateTimeField","validation","moment","toISOString","pattern","inputLength","min","max","renderTextField","meta","placeholder","helperText","fullWidth","InputField","hasLengthValidation","validate","undefined","RawFilters","state","isLoadingFilters","then","setState","filter","this","props","reset","pristine","List","CircularProgress","ListItem","data-test-id","renderFilters","onClick","disabled","Component","Filters","reduxForm","form","RawListPlaylists","isLoading","_handleNameChange","event","target","listFeaturedPlaylists","pollingInterval","setInterval","prevProps","prevState","formValues","margin","onChange","GridList","cellHeight","playlist","toLowerCase","indexOf","GridListTile","src","images","url","alt","GridListTileBar","aria-label","title","subtitle","description","actionIcon","IconButton","external_urls","spotify","ListPlaylists","connect","getFormValues","root","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","padding","paddingTop","Playlists","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","CssBaseline","AppBar","position","Toolbar","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","createMuiTheme","palette","primary","secondary","App","hasAccessToken","handleAccessToken","setItem","setAccessToken","ThemeProvider","Boolean","hostname","match","rootReducer","combineReducers","formReducer","devToolsExtension","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eca3f48f.chunk.js","sourcesContent":["/* eslint-disable camelcase */\nimport qs from 'qs';\n\nconst _clearAccessTokenUrl = () => window.history.pushState(null, '', window.location.href.split('#')[0]);\n\nexport const getAccessToken = () => {\n  const accessToken = localStorage.getItem('accessToken');\n\n  if (!accessToken) {\n    const { access_token } = qs.parse(window.location.hash.substr(1));\n    _clearAccessTokenUrl();\n    return access_token;\n  }\n\n  return accessToken;\n};\n\nexport const setAccessToken = (accessToken) => {\n  localStorage.setItem('accessToken', accessToken);\n};\n\nexport const removeAccessToken = () => {\n  localStorage.removeItem('accessToken');\n};\n","import React from 'react';\nimport { Button, Container, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SPOTIFY_CLIENT_ID, REDIRECT_URL } from '../constants';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    marginTop: theme.spacing(5),\n  },\n  h4: {\n    marginTop: theme.spacing(2),\n  },\n  h2: {\n    fontWeight: '500',\n  },\n  main: {\n    textAlign: 'center',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n\n  },\n}));\n\nexport default function Login() {\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" className={classes.main}>\n      <Typography variant=\"h2\" className={classes.h2}>\n        SPOTIFOOD\n      </Typography>\n      <Typography variant=\"h4\" className={classes.h4}>\n        Top playlists para aproveitar sua comida!\n      </Typography>\n      <Button\n        href={`https://accounts.spotify.com/authorize?client_id=${SPOTIFY_CLIENT_ID}&response_type=token&redirect_uri=${REDIRECT_URL}`}\n        variant=\"contained\"\n        color=\"secondary\"\n        size=\"large\"\n        className={classes.button}\n      >\n        Login com Spotify\n      </Button>\n    </Container>\n  );\n}\n","export const SPOTIFY_CLIENT_ID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\nexport const REDIRECT_URL = process.env.NODE_ENV === 'development'\n  ? 'http://localhost:3000' : process.env.REACT_APP_REDIRECT_URL;\nexport const PLAYLISTS_REFRESH_INTERVAL = 30000;\n","import Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { removeAccessToken } from '../utils/accessToken';\n\nexport const getFilters = async () => {\n  const { data } = await Axios.get('https://www.mocky.io/v2/5a25fade2e0000213aa90776');\n\n  return data.filters;\n};\n\nconst _handleFeaturedPlaylistsError = ({ response }) => {\n  if (response.status === 401) {\n    removeAccessToken();\n  }\n  toast.error(`[${response.status}] - ${response.data.error.message}`);\n};\n\nexport const getFeaturedPlaylists = async (params = {}) => {\n  const accessToken = localStorage.getItem('accessToken');\n\n  try {\n    const { data } = await Axios.get('https://api.spotify.com/v1/browse/featured-playlists',\n      {\n        params,\n        headers: { Authorization: `Bearer ${accessToken}` },\n      });\n\n    return data.playlists.items;\n  } catch (error) {\n    _handleFeaturedPlaylistsError(error);\n    return [];\n  }\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { Field } from 'redux-form';\nimport PropTypes from 'prop-types';\nimport {\n  Select,\n  InputLabel,\n  FormControl,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  formControl: {\n    minWidth: '100%',\n  },\n}));\n\nconst renderSelectField = ({\n  input,\n  children,\n  className,\n  label,\n  ...custom\n}) => (\n  <FormControl className={className.formControl}>\n    <InputLabel>{label}</InputLabel>\n    <Select\n      native\n      {...input}\n      {...custom}\n      inputProps={{\n        name: input.name,\n      }}\n    >\n      {children}\n    </Select>\n  </FormControl>\n);\n\nrenderSelectField.propTypes = {\n  label: PropTypes.string,\n  children: PropTypes.node,\n  input: PropTypes.object,\n  className: PropTypes.object,\n};\n\nfunction SelectField({ values, id, filterName }) {\n  const classes = useStyles();\n  return (\n    <Field\n      name={id}\n      component={renderSelectField}\n      className={classes}\n      label={filterName}\n    >\n      <option />\n      {values.map(({ value, name }, index) => (\n        <option value={value} key={index}>{name}</option>))}\n    </Field>\n  );\n}\n\nSelectField.propTypes = {\n  id: PropTypes.string,\n  filterName: PropTypes.string,\n  values: PropTypes.array,\n};\n\nexport default SelectField;\n","import React from 'react';\nimport { Field } from 'redux-form';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport moment from 'moment';\n\nconst renderDateTimerField = ({\n  label,\n  input,\n  className,\n  ...custom\n}) => (\n  <TextField\n    InputLabelProps={{ shrink: true }}\n    type=\"datetime-local\"\n    label={label}\n    {...input}\n    {...custom}\n  />\n);\n\nrenderDateTimerField.propTypes = {\n  className: PropTypes.object,\n  label: PropTypes.string,\n  input: PropTypes.object,\n};\n\nfunction DateTimeField({ filterName, id, validation }) {\n  return (\n    <Field\n      name={id}\n      component={renderDateTimerField}\n      label={filterName}\n      parse={(value) => moment(value).toISOString(validation.pattern)}\n    />\n  );\n}\n\nDateTimeField.propTypes = {\n  id: PropTypes.string,\n  filterName: PropTypes.string,\n  validation: PropTypes.object,\n};\n\nexport default DateTimeField;\n","const inputLength = (value, { min, max }) => {\n  if (value > max || value < min) {\n    return `Valor deve estar entre ${min} e ${max}`;\n  }\n\n  return undefined;\n};\n\nexport default inputLength;\n","import React from 'react';\nimport { Field } from 'redux-form';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport inputLength from '../Validations/inputLength';\n\nconst renderTextField = ({\n  label,\n  input,\n  meta,\n  ...custom\n}) => (\n  <TextField\n    label={label}\n    placeholder={label}\n    helperText={meta.error}\n    {...input}\n    {...custom}\n    fullWidth\n    type=\"number\"\n  />\n);\n\nrenderTextField.propTypes = {\n  label: PropTypes.string,\n  input: PropTypes.object,\n  meta: PropTypes.object,\n};\n\nfunction InputField({ filterName, id, validation }) {\n  const hasLengthValidation = !!validation.min;\n\n  return (\n    <Field\n      name={id}\n      component={renderTextField}\n      label={filterName}\n      validate={hasLengthValidation\n        ? (value) => inputLength(value, validation) : undefined}\n    />\n  );\n}\n\nInputField.propTypes = {\n  filterName: PropTypes.string,\n  id: PropTypes.string,\n  validation: PropTypes.object,\n};\n\nexport default InputField;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CircularProgress, List, ListItem, Button,\n} from '@material-ui/core';\nimport { reduxForm } from 'redux-form';\nimport { getFilters } from '../../services/services';\nimport SelectField from '../Fields/SelectField';\nimport DateTimeField from '../Fields/DateTimeFIeld';\nimport InputField from '../Fields/InputField';\n\nexport class RawFilters extends Component {\n  state = {\n    filters: null,\n    isLoadingFilters: true,\n  }\n\n  componentDidMount() {\n    getFilters()\n      .then(((filters) => this.setState({ filters, isLoadingFilters: false })));\n  }\n\n  renderFilters(filter) {\n    if (filter.id === 'locale' || filter.id === 'country') {\n      return (\n        <SelectField\n          filterName={filter.name}\n          values={filter.values}\n          key={filter.id}\n          id={filter.id}\n        />\n      );\n    }\n\n    if (filter.id === 'limit' || filter.id === 'offset') {\n      return (\n        <InputField\n          filterName={filter.name}\n          validation={filter.validation}\n          key={filter.id}\n          id={filter.id}\n        />\n      );\n    }\n\n    return (\n      <DateTimeField\n        filterName={filter.name}\n        validation={filter.validation}\n        key={filter.id}\n        id={filter.id}\n      />\n    );\n  }\n\n  render() {\n    const { filters, isLoadingFilters } = this.state;\n    const { reset, pristine } = this.props;\n\n    return (\n      <List>\n        {isLoadingFilters && <CircularProgress />}\n        {!isLoadingFilters && filters.map((filter) => (\n          <ListItem key={filter.id} data-test-id=\"filter-item\">\n            {this.renderFilters(filter)}\n          </ListItem>\n        ))}\n        <ListItem>\n          <Button\n            onClick={reset}\n            disabled={pristine}\n            color=\"primary\"\n            variant=\"contained\"\n            fullWidth\n          >\n            Limpar filtros\n          </Button>\n        </ListItem>\n      </List>\n    );\n  }\n}\n\nRawFilters.propTypes = {\n  reset: PropTypes.func,\n  pristine: PropTypes.bool,\n};\n\nexport default reduxForm({\n  form: 'FILTERS_FORM',\n})(RawFilters);\n","import Filters from './Filters';\n\nexport default Filters;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  GridList, GridListTile, IconButton, GridListTileBar, CircularProgress, TextField,\n} from '@material-ui/core';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport { getFormValues } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { PLAYLISTS_REFRESH_INTERVAL } from '../../constants';\n\nimport { getFeaturedPlaylists } from '../../services/services';\n\nexport class RawListPlaylists extends Component {\n  state = {\n    isLoading: true,\n    playlists: [],\n    name: '',\n  }\n\n  componentDidMount() {\n    this.listFeaturedPlaylists();\n\n    this.pollingInterval = setInterval(\n      () => this.listFeaturedPlaylists(), PLAYLISTS_REFRESH_INTERVAL,\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state !== prevState) {\n      return;\n    }\n\n    this.listFeaturedPlaylists();\n  }\n\n  componentWillUnmount() {\n    this.pollingInterval = null;\n  }\n\n  _handleNameChange = (event) => {\n    const { value } = event.target;\n    this.setState({ name: value });\n  }\n\n  async listFeaturedPlaylists() {\n    const { formValues } = this.props;\n\n    const playlists = await getFeaturedPlaylists(formValues);\n    this.setState({ isLoading: false, playlists });\n  }\n\n  render() {\n    const { isLoading, playlists, name } = this.state;\n    const _filterPlaylistsByName = (playlist) => (\n      playlist.name.toLowerCase().indexOf(name.toLowerCase()) > -1\n    );\n\n    return (\n      <>\n        <TextField\n          margin=\"normal\"\n          label=\"Buscar playlists\"\n          variant=\"outlined\"\n          onChange={this._handleNameChange}\n          fullWidth\n        />\n        {isLoading && <CircularProgress />}\n        {!isLoading && (\n          <GridList cellHeight={300}>\n            {playlists.filter(_filterPlaylistsByName).map((playlist, index) => (\n              <GridListTile key={index}>\n                <img src={playlist.images[0].url} alt={playlist.name} />\n                <GridListTileBar\n                  aria-label=\"Nome da playlist\"\n                  title={playlist.name}\n                  subtitle={(\n                    <span aria-label=\"Descrição da playlist\">\n                      {playlist.description}\n                    </span>\n                  )}\n                  actionIcon={(\n                    <IconButton\n                      aria-label={`Link para a playlist ${playlist.name}`}\n                      href={playlist.external_urls.spotify}\n                      target=\"blank\"\n                    >\n                      <OpenInNewIcon color=\"secondary\" />\n                    </IconButton>\n                  )}\n                />\n              </GridListTile>\n            ))}\n          </GridList>\n        )}\n      </>\n    );\n  }\n}\n\nRawListPlaylists.propTypes = {\n  formValues: PropTypes.object,\n};\n\nexport default connect((state) => ({\n  formValues: getFormValues('FILTERS_FORM')(state),\n}))(RawListPlaylists);\n","import ListPlaylists from './ListPlaylists';\n\nexport default ListPlaylists;\n","import React from 'react';\nimport {\n  makeStyles,\n  useTheme,\n  Drawer,\n  Hidden,\n  AppBar,\n  CssBaseline,\n  IconButton,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport Filters from '../components/Filters';\nimport ListPlaylists from '../components/ListPlaylists';\nimport './Playlists.css';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  toolbar: {\n    ...theme.mixins.toolbar,\n    width: '100%',\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    paddingTop: theme.spacing(10),\n    justifyContent: 'center',\n    display: 'flex',\n  },\n}));\n\n\nfunction Playlists() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Filters />\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            SpotiFood\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true,\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar}>\n          <ListPlaylists />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default Playlists;\n","import React, { Component } from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { getAccessToken, setAccessToken } from './utils/accessToken';\nimport Login from './pages/Login';\nimport Playlists from './pages/Playlists';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#EA1D2C',\n    },\n    secondary: {\n      main: '#1ED760',\n    },\n  },\n});\n\nclass App extends Component {\n  state = {\n    hasAccessToken: false,\n  };\n\n  componentDidMount() {\n    this.handleAccessToken();\n  }\n\n  handleAccessToken() {\n    const accessToken = getAccessToken();\n\n    if (accessToken) {\n      setAccessToken(accessToken);\n      this.setState({ hasAccessToken: true });\n    }\n  }\n\n  render() {\n    const { hasAccessToken } = this.state;\n\n    return (\n      <div className=\"App\">\n        <ThemeProvider theme={theme}>\n          {hasAccessToken && <Playlists />}\n          {!hasAccessToken && <Login />}\n        </ThemeProvider>\n        <ToastContainer position=\"bottom-right\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { createStore, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nconst rootReducer = combineReducers({\n  form: formReducer,\n});\n\nexport default (window.devToolsExtension\n  ? window.devToolsExtension()(createStore)\n  : createStore)(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport createStore from './redux/createStore';\n\n\nReactDOM.render(\n  <Provider store={createStore}>\n    <App />\n  </Provider>, document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}